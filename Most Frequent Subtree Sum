/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
map<int,int>hashing;
int dfs( TreeNode* u){
    if(u==NULL){return 0;}
    int som=0;
    bool test2=false;
    bool test3=false;
   int som1= dfs(u->left);
   int som2= dfs(u->right);
    som+=som1+som2+u->val;
    hashing[som]++;
    return som;}
class Solution {
public:
    vector<int> findFrequentTreeSum(TreeNode* root) {
        hashing.clear();
        int ans=0;
        dfs(root);
        for(auto v:hashing){
            ans=max(ans,hashing[v.first]);
        }
        vector<int>res;
        for(auto v:hashing){
            if(ans==hashing[v.first])res.push_back(v.first);
        }
    return res;
    }
};

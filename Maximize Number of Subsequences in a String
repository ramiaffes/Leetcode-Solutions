class Solution {
public:
    long long maximumSubsequenceCount(string text, string pattern) {
        vector<int>dp(text.length());
        if(text[0]==pattern[0]){ dp[0]++;
        }
        for(int i=1;i<(text.length());i++){
            dp[i]=dp[i-1];
            if(text[i]==pattern[0])dp[i]+=1;
        }
          vector<int>dp1(text.length());
        if(text[text.length()-1]==pattern[1]){ dp1[text.length()-1]++;
        }
        for(int i=text.length()-2;i>=0;i--){
            dp1[i]=dp1[i+1];
            if(text[i]==pattern[1])dp1[i]+=1;
        }
    long long int som=0;
    for(int i=1;i<(text.length());i++){
        if(text[i]==pattern[1]){
            som+=dp[i-1];
        }
    }
    long long int ans=0;
    for(int i=0;i<(text.length());i++){
        ans=max(ans,som+dp[i]);
    }
     for(int i=0;i<(text.length());i++){
        ans=max(ans,som+dp1[i]);
    }
    if(pattern[0]==pattern[1]){
         for(int i=0;i<(text.length()-1);i++){
        ans=max(ans,som+dp1[i+1]+dp[i]);
    }
    }
    return ans;    
    }
};

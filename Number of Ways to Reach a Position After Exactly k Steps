long long int l[1001][1001] = { 0 };
 
void initialize()
{
 
    // 0C0 = 1
    l[0][0] = 1;
    for (long long int i = 1; i < 1001; i++) {
        // Set every nCr = 1 where r = 0
        l[i][0] = 1;
        for (long long int j = 1; j < i + 1; j++) {
 
            // Value for the current cell of Pascal's triangle
            l[i][j] = (l[i - 1][j - 1] + l[i - 1][j])%1000000007;
        }
    }
}
 
// Function to return the value of nCr
long long int nCr(long long int n,long long  int r)
{
    // Return nCr
    return l[n][r];
}
 
class Solution {
public:
    int numberOfWays(int startPos, int endPos, int k) {
        initialize();
        if(k<abs(startPos-endPos))return 0;
        if(k==(abs(startPos-endPos))){
            return 1;
        }
        if((k-(abs(startPos-endPos)))%2==1){
            return 0;
        }
    return nCr(k,(k-abs(startPos-endPos))/2);
    
    }
};

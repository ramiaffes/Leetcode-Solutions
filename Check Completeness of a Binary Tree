/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
map<int,int>my;
map<int,vector<TreeNode*>>my1;
void dfs( TreeNode* u,int som){
     my1[som].push_back(u);
    if(u==NULL)return; 
    my[som]++;
    som++;   
    
    dfs(u->left,som);
    dfs(u->right,som); 
 
   
		}
class Solution {
public:
    bool isCompleteTree(TreeNode* root) {
        my.clear();
        my1.clear();
        
        dfs(root,0);
        int som=1;
        for(auto v:my){
            if(v.first==0){som*=2;continue;}
            if((v.first==(my.size()-1))){
                int i=0;
                while((i<my1[v.first].size())and(my1[v.first][i]!=NULL)){
                    i++;
                }
                int j=my1[v.first].size()-1; 
                 while((j>=0)and(my1[v.first][j]==NULL)){
                   j--; 
                }
            if(j>i)return false;
               
                continue;
            }
            if(my[v.first]!=som)return false;
            som*=2;
        
        
        }
    return true;
    }
};

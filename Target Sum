map<pair<int,int>,int>dp; 
map<pair<int,int>,bool>vis;
void func(int target,vector<int>nums,int i,int target1){
    int n=nums.size();
    vis[make_pair(target,i)]=1;
    if((target==target1)and(i==(n))){
        dp[make_pair(target,n)]=1;
        return;
    }
    else if(i==(n)){
        return;
    }
    if(vis[make_pair(target-nums[i],i+1)]==0){
        func(target-nums[i],nums,i+1,target1);
    }
     if(vis[make_pair(target+nums[i],i+1)]==0){
        func(target+nums[i],nums,i+1,target1);
    }
    
    dp[make_pair(target,i)]+=dp[make_pair(target-nums[i],i+1)];
    dp[make_pair(target,i)]+=dp[make_pair(target+nums[i],i+1)];
}
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int target) {
        dp.clear();
        vis.clear();
      func(0,nums,0,target);
      int n=nums.size();
      return dp[make_pair(0,0)];
    }
};

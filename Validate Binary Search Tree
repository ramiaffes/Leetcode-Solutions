/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
bool test=true;
pair<long long int,long long int> dfs( TreeNode* u){
    if(u==NULL)return make_pair(-1e11,1e11);
    pair<long long int,long long int>ans2;
    pair<long long int,long long int>ans=dfs(u->left);
    pair<long long int,long long int>ans1=dfs(u->right); 
    
    if(((u->left!=NULL)and(((u->val)<=ans.first)))or((u->right!=NULL)and((ans1.second<=(u->val))))){
        test=false;
    }
    ans2.first=max(ans.first,ans1.first);
    long long int valeur=u->val;
    ans2.first=max(ans2.first,valeur);
    ans2.second=min(ans1.second,ans.second);
     ans2.second=min(ans2.second,valeur);
    return ans2;
		}
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        test=true;
        dfs(root);
        return test;
    }
};

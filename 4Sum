class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        set<vector< int>>res1;
    map< long long int,  int>hashing;
    for(int d=0;d<nums.size();d++){
hashing[nums[d]]++;
    }
vector<int>nums1;
for(auto v:hashing){
    if(hashing[v.first]>4){
        for(int i=0;i<4;i++){
            nums1.push_back(v.first);
        }
        hashing[v.first]=4;

    }
else{
    for(int i=0;i<hashing[v.first];i++){
        nums1.push_back(v.first);
    }
}
}
nums=nums1;

int val=nums.size()-2;
    for(int i=0;i<(val);i++){
        for(int j=i+1;j<(val+1);j++){
            for(int d=j+1;d<(val+2);d++){
                long long int val2=target;
                val2-=nums[i];
                val2-=nums[j];
                val2-=nums[d];
                   if(hashing[val2]>=(1+(val2==nums[d])+(val2==nums[j])+(val2==nums[i]))){
                       vector< int>res;
                       res.push_back(nums[i]);
                       res.push_back(nums[j]);
                       res.push_back(nums[d]);
                       res.push_back(target-nums[i]-nums[j]-nums[d]);
                       sort(res.begin(),res.end());
                       res1.insert(res);
                   }
                
            }
        }
    }
vector<vector< int>>res2;
for(auto v:res1){
    res2.push_back(v);
}
return res2;
    }
};

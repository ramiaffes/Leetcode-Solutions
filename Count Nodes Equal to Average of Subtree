/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 int res=0;
pair<int,int> dfs(TreeNode* u){
     if(u==NULL)return make_pair(0,0);
     int som=u->val;
     int som1=1;
     pair<int,int>val=dfs(u->left);
     pair<int,int>val2=dfs(u->right);
     som+=val.first;
     som1+=val.second;
     som+=val2.first;
     som1+=val2.second;
     if(som/som1==u->val){
         res++;
     }
     return make_pair(som,som1);
 }
class Solution {
public:
    int averageOfSubtree(TreeNode* root) {
        res=0;
        dfs(root);
        return res;
    }
};

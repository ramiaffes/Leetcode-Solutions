class Solution {
public:
long long  printNcR(int n, int r)
{
 
    // p holds the value of n*(n-1)*(n-2)...,
    // k holds the value of r*(r-1)...
    long long p = 1, k = 1;
 
    // C(n, r) == C(n, n-r),
    // choosing the smaller value
    if (n - r < r)
        r = n - r;
 
    if (r != 0) {
        while (r) {
            p *= n;
            k *= r;
 
            // gcd of p, k
            long long m = __gcd(p, k);
 
            // dividing by gcd, to simplify
            // product division by their gcd
            // saves from the overflow
            p /= m;
            k /= m;
 
            n--;
            r--;
        }
 
        // k should be simplified to 1
        // as C(n, r) is a natural number
        // (denominator should be 1 ) .
    }
 
    else
        p = 1;
 
    // if our approach is correct p = ans and k =1
   return p;
}
    int threeSumMulti(vector<int>& arr, int target) {
          map<int,int>hashing;
          long long int som=0;
         for(int i=0;i<arr.size();i++){
             hashing[arr[i]]++;
         }
          sort(arr.begin(),arr.end());
         auto it = unique (arr.begin(), arr.end());  
       arr.resize( distance(arr.begin(),it) );
         for(int i=0;i<arr.size();i++){
             if((target%3==0)and(arr[i]==(target/3))){
                 if(hashing[arr[i]]>=3){
                     som+=printNcR(hashing[arr[i]],3);
                 }
             }
             else if((hashing[arr[i]]>=2)and(hashing[target-2*arr[i]]>=1)){
                 som+=printNcR(hashing[arr[i]],2)*hashing[target-2*arr[i]];

             }
         }
         int som1=0;
         for(int i1=0;i1<arr.size();i1++){
        int i=0;
        int j=arr.size()-1;
        while(i<j){
            if(i==i1){
                i++;
            }
            else if(j==i1){
                j--;

            }
            else if((arr[i]+arr[j])==target-arr[i1]){
                som1+=hashing[arr[i]]*hashing[arr[j]]*hashing[arr[i1]];
                j--;
                i++;
            }
           else if((arr[i]+arr[j])>(target-arr[i1])){
                j--;
            }
        else{
            i++;
        }
        }}
    int val=(som1/3+som)%1000000007;
    return val;
    }
};

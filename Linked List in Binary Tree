/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
bool test=false;
void dfs( TreeNode* u,vector<int>res,vector<int>res1){
    if(test==true)return;
    if(u==NULL)return;
    if(res1.size()<res.size()){
        res1.push_back(u->val);
    }
    else if(res1.size()==res.size()){
        res1.erase(res1.begin());
        res1.push_back(u->val);
    }
    if(res==res1)test=true;
    dfs(u->left,res,res1);
    dfs(u->right,res,res1);
		}
class Solution {
public:
    bool isSubPath(ListNode* head, TreeNode* root) {
        test=false;
        ListNode* current=head;
        vector<int>res;
        while(current!=NULL){
            res.push_back(current->val);
            current=current->next;
        }
    vector<int>res1;
    dfs(root,res,res1);
    return test;
    }
};

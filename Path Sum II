/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
map<TreeNode*, int>tin;
map< TreeNode*, int>tout;
vector<TreeNode*>res;
vector<TreeNode*>res3;
int timer=0;
void dfs( TreeNode* u,int som,int targetSum){
    if(u==NULL)return;
    som+=u->val;
    if((som==targetSum)and(u->left==NULL)and(u->right==NULL)){
        res.push_back(u);
    }
    res3.push_back(u);
	tin[u]=timer++;
    dfs(u->left,som,targetSum);
    dfs(u->right,som,targetSum);
		tout[u]=timer++;}
bool isancestor( TreeNode* u, TreeNode* v){
	return (tin[u]<=tin[v]) and (tout[u]>=tout[v]);}
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        res.clear();
        res3.clear();
        tin.clear();
        tout.clear();
        timer=0;
        dfs(root,0,targetSum);
        vector<vector<int>> res2;
        for(auto v:res){
            vector<int>res1;
            for(auto v1:res3){
                if(isancestor(v1,v)==true){
                    res1.push_back(v1->val);
                }
            }
        res2.push_back(res1);
        }
    return res2;
    }
};

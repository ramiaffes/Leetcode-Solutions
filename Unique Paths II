map<pair<long long int,long long int>,vector<pair<long long int,long long int>>>adj;
map<pair<long long int,long long int>,bool>vis;
long long int som=0;
map<pair<long long int,long long int>,long long int>dp;
void dfs(pair<long long int,long long int>u,int n,int m){
	if((adj[u].empty())and(((u.first==n-1)and(u.second==(m-1))))){dp[u]=1;return;}
	for(auto v:adj[u]){
        if((dp[v]!=0)){
            dp[u]+=dp[v];
        }
        else{
		dfs(v,n,m);
        dp[u]+=dp[v];}}}
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n=obstacleGrid.size();
        int m=obstacleGrid[0].size();
        adj.clear();
        dp.clear();
        som=0;
        for(long long int i(0);i<n;i++){
            for(long long int j(0);j<(m-1);j++){
                if((obstacleGrid[i][j]==0)and(obstacleGrid[i][j+1]==0))
                adj[make_pair(i,j)].push_back(make_pair(i,j+1));
            }
        } 
        for(long long int j(0);j<(m);j++){
         for(long long int i(0);i<(n-1);i++){
             if((obstacleGrid[i][j]==0)and(obstacleGrid[i+1][j]==0))
                adj[make_pair(i,j)].push_back(make_pair(i+1,j));
            }
        }
        dfs(make_pair(0,0),n,m);
    if(obstacleGrid[0][0]==1)return 0;
    return dp[make_pair(0,0)];
    }
};

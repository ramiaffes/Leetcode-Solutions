 void tokenize(string const &str, const char delim,
            vector<string> &out)
{
    size_t start;
    size_t end = 0;
    while ((start = str.find_first_not_of(delim, end)) != std::string::npos)
    {
        end = str.find(delim, start);
        out.push_back(str.substr(start, end - start));
    }
}
template <typename T>
string join(const T& v, const string& delim) {
    ostringstream s;
    for (const auto& i : v) {
        if (&i != &v[0]) {
            s << delim;
        }
        s << i;
    }
    return s.str();
}
class Solution {
public:
    int calculate(string s) {
        int som=1;
        vector<int>res;
        vector<string>out;
        tokenize(s,' ',out);
        string s1=join(out,"");
        s=s1;
    int i=0;
    string str;
    while((i<s.length())and(isdigit(s[i]))){
        string var(1,s[i]);
        str.append(var);
        i++;
    }
    som=stoi(str);
     while(i<(s.length()-1)){
          if(s[i]=='*'){
              string str;
              while((i<(s.length()-1))and(isdigit(s[i+1]))){
                  string var(1,s[i+1]);

                  str.append(var);
              i++;}i++;
              
              som*=(stoi(str));if(i==(s.length()-1))break;}
          
          else if(s[i]=='/'){
              string str;
              while((i<(s.length()-1))and(isdigit(s[i+1]))){
                  string var(1,s[i+1]);
                  str.append(var);
              i++;}i++;
              som/=(stoi(str));if(i==(s.length()-1))break;
          }
         else{
             if(s[i]=='-'){
                  res.push_back(som);
                  string str;
              while((i<(s.length()-1))and(isdigit(s[i+1]))){
                  string var(1,s[i+1]);
                  str.append(var);
              i++;}i++;
              som=-(stoi(str));if(i==(s.length()-1))break;
             }
             else if(s[i]=='+'){
                  res.push_back(som);
                     string str;
               while((i<(s.length()-1))and(isdigit(s[i+1]))){
                  
                  string var(1,s[i+1]);
                  str.append(var);
              i++;}
                 i++;
              som=(stoi(str));if(i==(s.length()-1))break;
             }
         }
          }
   res.push_back(som);
    int som1=0;
    for(auto v:res){
        som1+=v;
    }
    return som1;
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
map<int,vector<int>>adj;
map<int,bool>vis;
int ans=0;
void remplir( TreeNode* u){
    if(u==NULL)return;
    if(u->left!=NULL){
        adj[u->val].push_back(u->left->val);
         adj[u->left->val].push_back(u->val);
    }
    if(u->right!=NULL){
        adj[u->val].push_back(u->right->val);
         adj[u->right->val].push_back(u->val);
    }
    remplir(u->left);
    remplir(u->right);
	}
void dfs(int u ,int som){
    if(vis[u]==1)return;
    vis[u]=1;
    ans=max(ans,som);
    for(auto v:adj[u])dfs(v,som+1);
}
class Solution {
public:
    int amountOfTime(TreeNode* root, int start) {
        ans=0;
        vis.clear();
        adj.clear();
        remplir(root);
        dfs(start,0);
        return ans;
    }
};

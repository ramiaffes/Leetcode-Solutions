class Solution {
public:
    int maxFreq(string s, int maxLetters, int minSize, int maxSize) {
        deque<char>dq;
        map<char,int>hashing;
        map<int,int>hashing1;
        map<char,bool>vis;
        map<deque<char>,int>hashing2;
        for(int i=0;i<minSize;i++){
            dq.push_back(s[i]);
            if(vis[s[i]]==1)hashing1[hashing[s[i]]]--;
            hashing[s[i]]++;
            hashing1[hashing[s[i]]]++;
            vis[s[i]]=1;
        }
        for(int i=0;i<s.length();i++){

            if((hashing.size()-hashing1[0])<=maxLetters)hashing2[dq]++;
            if((i+minSize)>=s.length())break;
            dq.push_back(s[i+minSize]);
            if(vis[s[i+minSize]])hashing1[hashing[s[i+minSize]]]--;
            hashing[s[i+minSize]]++;
            hashing1[hashing[s[i+minSize]]]++;
            hashing1[hashing[dq.front()]]--;
           
            hashing[dq.front()]--;

             hashing1[hashing[dq.front()]]++;
              dq.pop_front();
             vis[s[i+minSize]]=1;
        }

    int ans=0;
    for(auto v:hashing2){
        ans=max(ans,v.second);
    }
    return ans;
    }
};

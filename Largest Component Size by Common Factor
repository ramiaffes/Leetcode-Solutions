map<long long int,set<long long int>>adj;
map<long long int,bool>vis;
long long int som=0;
void dfs(long long int u){
    if(vis[u]==1)return;
	vis[u]=1;
    som++;
    if(adj[u].empty())return;
	for(auto v:adj[u]){
		dfs(v);}}
class Solution {
public:
    int largestComponentSize(vector<int>& nums) {
        long long int n=0;
        adj.clear();
        vis.clear();
        som=0;
        for(int i=0;i<nums.size();i++){
            long long int val=nums[i];
           n=max(n,val);
        }
         bool prime[n + 1];
    memset(prime, true, sizeof(prime));
 
    for (int p = 2; p * p <= n; p++) {
        if (prime[p] == true) {
            for (int i = p * p; i <= n; i += p)
                prime[i] = false;
        }
    }
        map<long long int,set<long long int>>res;
       for(int i=0;i<nums.size();i++){
           if(prime[nums[i]]){res[nums[i]].insert(i);continue;}
           for(int j=2;j*j<=nums[i];j++){
               if(nums[i]%j==0){
               if(prime[j]){
                   res[j].insert(i);
               }
               if(prime[nums[i]/j])
                   res[nums[i]/j].insert(i);
           }
            
       }}
    for(auto v:res){
        if(res[v.first].size()>1){
            vector<long long int>vect(res[v.first].begin(),res[v.first].end());
            for(int i=0;i<(vect.size()-1);i++){
                adj[vect[i]].insert(vect[i+1]);
                adj[vect[i+1]].insert(vect[i]);
                
            }
        }
    }
        long long int ans1=0;
        
    for(int i(0);i<nums.size();i++){
        if(vis[i]==0)dfs(i);
        ans1=max(ans1,som);som=0;
    }
    
        
    return ans1;
    }
};

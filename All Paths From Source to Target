map<long long int,vector<long long int>>adj;
map<long long int,vector<long long int>>adj2;
map<long long int,bool>vis1;
 vector<vector<int>>res1;
void dfs1(long long int u){
	vis1[u]=1;
    if(adj[u].empty())return;
	for(auto v:adj[u]){
		dfs1(v);}}
void dfs2(long long int u,vector<int>res){
	if(vis1[u]==0){ return;}
    res.insert(res.begin(),u);
   
    if(u==0){res1.push_back(res);return;}
	for(auto v:adj2[u]){
		dfs2(v,res);}}
class Solution {
public:
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        int n=graph.size();
        vis1.clear();
        adj.clear();
        adj2.clear();
        res1.clear();
        for(int i=0;i<n;i++){
            for(int j=0;j<graph[i].size();j++){
            adj[i].push_back(graph[i][j]);
            adj2[graph[i][j]].push_back(i);}
        }
        dfs1(0);
        vector<int>res;
        dfs2(n-1,res);
    
   return res1; }
};

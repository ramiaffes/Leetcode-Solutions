map<pair<int,int>,vector<pair<int,int>>>adj;
map<pair<int,int>,bool>vis1;
long long int som=0;
vector<pair<int,int>>res;
void dfs1(pair<long long int,long long int>u){
	if(vis1[u]==1)return;
	vis1[u]=1;
    res.push_back(u);
	for(auto v:adj[u]){
		if(vis1[v]){
			continue;}
		dfs1(v);}}
class Solution {
public:
    int shortestBridge(vector<vector<int>>& grid) {
         res.clear();
        long long int ans=1000000;
         int n= grid.size();
         int m=grid[0].size();
        vector<vector<pair<int,int>>>res1;
        adj.clear();
        vis1.clear();
        for(long long int i(0);i<n;i++){
            for(long long int j(0);j<(m-1);j++){
                if((grid[i][j]==grid[i][j+1])and(grid[i][j]==1)){
                adj[make_pair(i,j)].push_back(make_pair(i,j+1));
                adj[make_pair(i,j+1)].push_back(make_pair(i,j));}
            }
        }
          for(long long int i(0);i<m;i++){
            for(long long int j(0);j<(n-1);j++){
                if((grid[j][i]==grid[j+1][i])and(grid[j][i]==1)){
                adj[make_pair(j,i)].push_back(make_pair(j+1,i));
                adj[make_pair(j+1,i)].push_back(make_pair(j,i));}
            }
        }
     for(long long int i(0);i<m;i++){
            for(long long int j(0);j<(n);j++){
                if((vis1[make_pair(j,i)]==0)and(grid[j][i]==1)){dfs1(make_pair(j,i));
                                          res1.push_back(res);res.clear();}
            }}
    for(auto v:res1[0]){
        for(auto v1:res1[1]){
            long long int val=abs(v1.first-v.first)+abs(v.second-v1.second);
            ans=min(ans,val);
        }
    }
    return ans-1;
    }
};

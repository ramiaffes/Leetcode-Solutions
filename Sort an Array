void heapify(vector<int>& nums, int N, int i)
{
 
    // Initialize largest as root
    int largest = i;
 
    // left = 2*i + 1
    int l = 2 * i + 1;
 
    // right = 2*i + 2
    int r = 2 * i + 2;
 
    // If left child is larger than root
    if (l < N && nums[l] > nums[largest])
        largest = l;
 
    // If right child is larger than largest
    // so far
    if (r < N && nums[r] > nums[largest])
        largest = r;
 
    // If largest is not root
    if (largest != i) {
        swap(nums[i], nums[largest]);
 
        // Recursively heapify the affected
        // sub-tree
        heapify(nums, N, largest);
    }
}
 
// Main function to do heap sort
void heapSort(vector<int>& nums, int N)
{
 
    for (int i = N / 2 - 1; i >= 0; i--)
        heapify(nums, N, i);
 
    // One by one extract an element
    // from heap
    for (int i = N - 1; i > 0; i--) {
 
        // Move current root to end
        swap(nums[0], nums[i]);
 
        heapify(nums, i, 0);
    }
}
class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        heapSort(nums,nums.size());
        return nums;
    }
};

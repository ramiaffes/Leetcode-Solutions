class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
         set<vector<int>> se;
         map<int,int>hashing;
         for(int i=0;i<nums.size();i++){
             hashing[nums[i]]++;
         }
         for(int i=0;i<nums.size();i++){
             if(nums[i]==0){
                 if(hashing[nums[i]]>=3){
                     vector<int>vect(3);
                        vect[0]=nums[i];
                        vect[1]=nums[i];
                        vect[2]=nums[i];
                        sort(vect.begin(),vect.end());
                se.insert(vect);
                 }
             }
             else if((hashing[nums[i]]>=2)and(hashing[-2*nums[i]]>=1)){
                  vector<int>vect(3);
                        vect[0]=nums[i];
                        vect[1]=nums[i];
                        vect[2]=-2*nums[i];
                        sort(vect.begin(),vect.end());
                se.insert(vect);

             }
         }
         sort(nums.begin(),nums.end());
         auto it = unique (nums.begin(), nums.end());  
        nums.resize( distance(nums.begin(),it) );
         for(int i1=0;i1<nums.size();i1++){
        int i=0;
        int j=nums.size()-1;
        while(i<j){
            if(i==i1){
                i++;
            }
            else if(j==i1){
                j--;

            }
            else if((nums[i]+nums[j])==-nums[i1]){
                vector<int>vect(3);
                        vect[0]=nums[i];
                        vect[1]=nums[j];
                        vect[2]=nums[i1];
                        sort(vect.begin(),vect.end());
                se.insert(vect);
                j--;
                i++;
            }
           else if((nums[i]+nums[j])>(-nums[i1])){
                j--;
            }
        else{
            i++;
        }
        }}
     vector<vector<int>>res;
    for(auto v:se)res.push_back(v);
    return res;
    }
};

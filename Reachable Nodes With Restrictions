map<long long int,vector<long long int>>adj;
map<long long int,bool>vis;
void dfs(long long int u){
	if(vis[u]==1)return;
	vis[u]=1;
	for(auto v:adj[u]){
		if(vis[v]){
			continue;}
		dfs(v);}}
class Solution {
public:
    int reachableNodes(int n, vector<vector<int>>& edges, vector<int>& restricted) {
        vis.clear();
        adj.clear();
        for(int i=0;i<edges.size();i++){
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
        for(int i=0;i<restricted.size();i++){
            vis[restricted[i]]=1;
        }
    dfs(0);
        int res=0;
    for(int i=0;i<=(n-1);i++){
        if(vis[i]==1)res++;
    }
        return(res-restricted.size());
    }
};

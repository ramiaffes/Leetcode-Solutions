/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
map<int, int>tin;
map< int, int>tout;
map<int,TreeNode*>hashing;
vector<int>res;
int timer=0;
void dfs( TreeNode* u){
    if(u==NULL)return;
    hashing[u->val]=u;
    res.push_back(u->val);
	tin[u->val]=timer++;
    dfs(u->left);
    dfs(u->right);
		tout[u->val]=timer++;}
bool isancestor( int u, int v){
	return (tin[u]<=tin[v]) and (tout[u]>=tout[v]);}
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        int val=0;
        res.clear();
        tin.clear();
        tout.clear();
        hashing.clear();
        timer=0;
        dfs(root);
        for(int i=0;i<res.size();i++){
            if((isancestor(res[i],p->val))and(isancestor(res[i],q->val))){
                val=res[i];
            }
        }
    return hashing[val];
    }
};

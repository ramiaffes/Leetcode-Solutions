/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
int ans=0;
int func(TreeNode* root){
    if(root==NULL)return 0;
    int som1=func(root->left);
   int som2= func(root->right);
    if((root->left==NULL)and(root->right==NULL)){ans=max(ans,0);}
    else if(root->left==NULL)ans=max(ans,som2+1);
   else if(root->right==NULL) ans=max(ans,som1+1);
   else ans=max(ans,som1+som2+2);
if((root->left==NULL)and(root->right==NULL))return max(som1,som2);
    else if(root->left==NULL) return max(som2+1,som1);
    else if(root->right==NULL) return max(som1+1,som2);
    return max(som1+1,som2+1);
}
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        ans=0;
        func(root);
        return ans;
    }
};

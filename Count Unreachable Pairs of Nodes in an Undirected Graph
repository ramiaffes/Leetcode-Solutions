map<long long int,vector<long long int>>adj;
map<long long int,bool>vis;
long long int som=0;
void dfs(long long int u){
	if(vis[u]==1)return;
	vis[u]=1;
    som++;
	for(auto v:adj[u]){
		if(vis[v]){
			continue;}
		dfs(v);}}
class Solution {
public:
    long long countPairs(int n, vector<vector<int>>& edges) {
        vector<long long int>res;
        som=0;
        long long int som1=0;
        adj.clear();
        vis.clear();
        for(int i=0;i<edges.size();i++){
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }
    for(int i=0;i<=(n-1);i++){
        if(vis[i]==0)dfs(i);
        res.push_back(som);som=0;
    }
    long long int som2=0;
         for(int i=0;i<res.size();i++){som2+=res[i];}
    for(int i=0;i<res.size();i++){
        som1+=(som2-res[i])*res[i];
        som2-=res[i];
    }
    return som1;
    
    
    
    }
};

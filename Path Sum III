/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
int ans=0;
map<TreeNode*,int>tin;
map< TreeNode*, int>tout;
int timer=0;
set<long long int>se;
map<long long int,vector<TreeNode*>>hashing;
void dfs( TreeNode* u,long long int som){
    if(u==NULL){return;}
	tin[u]=timer++;
    som+=u->val;
    hashing[som].push_back(u);
    se.insert(som);
    dfs(u->left,som);
    dfs(u->right,som);
		tout[u]=timer++;}
bool isancestor( TreeNode* u, TreeNode* v){
	return (tin[u]<=tin[v]) and (tout[u]>=tout[v]);}
class Solution {
public:
    int pathSum(TreeNode* root, int targetSum) {
        timer=0;
        hashing.clear();
        tin.clear();
        se.clear();
        tout.clear();
        dfs(root,0);
        int som=0;
        for(auto v:se){
            for(auto v1:hashing[targetSum+v]){
                for(auto v2:hashing[v]){
                    if(v1!=v2){
                    if(isancestor(v2,v1)){
                        som++;
                    }}
                }
            }
        }
        
            som+=hashing[targetSum].size();
        
    return som;
    }
};
